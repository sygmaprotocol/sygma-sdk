/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ColorsAbi, ColorsAbiInterface } from "./ColorsAbi";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "depositorAddress",
        type: "address",
      },
    ],
    name: "metadataDepositorEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "color",
        type: "bytes32",
      },
    ],
    name: "setColorEvent",
    type: "event",
  },
  {
    inputs: [],
    name: "colorCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "colorsArray",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "color",
        type: "bytes32",
      },
    ],
    name: "setColorOnDeploy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "metadataDepositor",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "color",
        type: "bytes32",
      },
    ],
    name: "setColor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "popColor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getColorsArrayLenght",
    outputs: [
      {
        internalType: "uint256",
        name: "l",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getCurrentColors",
    outputs: [
      {
        internalType: "bytes32",
        name: "colorReturned",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "newColor",
        type: "bytes32",
      },
    ],
    name: "insertColorToColorsArray",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "color",
        type: "bytes32",
      },
    ],
    name: "findColor",
    outputs: [
      {
        internalType: "bytes32",
        name: "colorFound",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
];

const _bytecode =
  "0x6080604052600060015534801561001557600080fd5b5061045c806100256000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639646267f116100665780639646267f146100ed578063a3b13c7b146100f5578063adca5e6d14610108578063bc8dd74f14610148578063c77f544d1461015b57600080fd5b8063103b854b1461009857806312027898146100ad5780632b888dd3146100d2578063657807a0146100da575b600080fd5b6100ab6100a6366004610396565b610164565b005b6100c06100bb3660046103b8565b610220565b60405190815260200160405180910390f35b6000546100c0565b6100c06100e83660046103b8565b6102be565b6100ab6102df565b6100c06101033660046103b8565b610308565b6100ab6101163660046103b8565b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630155565b6100ab6101563660046103b8565b61032e565b6100c060015481565b60008054600181810183558280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639091018390558054916101a5836103d1565b909155505060405181815282907f66ce5d8d38e94343b11412bff90066903585cff04de2aeb30192cdfe55aef1289060200160405180910390a16040516001600160a01b03821681527f413fa7f4db80c36bdef91d5b04e9989a7a3115f94f367af2978a4d80d5181b7a9060200160405180910390a1505050565b6000805b6000548110156102b8576000808281548110610242576102426103fa565b906000526020600020015490508060405160200161026291815260200190565b60408051601f19818403018152828252805160209182012090830187905291016040516020818303038152906040528051906020012014156102a55791506102b8565b50806102b0816103d1565b915050610224565b50919050565b600081815481106102ce57600080fd5b600091825260209091200154905081565b60008054806102f0576102f0610410565b60019003818190600052602060002001600090559055565b600080828154811061031c5761031c6103fa565b90600052602060002001549050919050565b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563018190556040518181527f66ce5d8d38e94343b11412bff90066903585cff04de2aeb30192cdfe55aef1289060200160405180910390a150565b600080604083850312156103a957600080fd5b50508035926020909101359150565b6000602082840312156103ca57600080fd5b5035919050565b60006000198214156103f357634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220268283d117cfd01502a25896ecefd8182ecc1e3aaef37ab5a604da5d3d7df73c64736f6c634300080b0033";

type ColorsAbiConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ColorsAbiConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ColorsAbi__factory extends ContractFactory {
  constructor(...args: ColorsAbiConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ColorsAbi";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ColorsAbi> {
    return super.deploy(overrides || {}) as Promise<ColorsAbi>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ColorsAbi {
    return super.attach(address) as ColorsAbi;
  }
  connect(signer: Signer): ColorsAbi__factory {
    return super.connect(signer) as ColorsAbi__factory;
  }
  static readonly contractName: "ColorsAbi";
  public readonly contractName: "ColorsAbi";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ColorsAbiInterface {
    return new utils.Interface(_abi) as ColorsAbiInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ColorsAbi {
    return new Contract(address, _abi, signerOrProvider) as ColorsAbi;
  }
}
