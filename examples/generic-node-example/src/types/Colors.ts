/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ColorsInterface extends utils.Interface {
  contractName: "Colors";
  functions: {
    "colorCounter()": FunctionFragment;
    "colorsArray(uint256)": FunctionFragment;
    "setColorOnDeploy(bytes32)": FunctionFragment;
    "setColor(bytes32,bytes32)": FunctionFragment;
    "popColor()": FunctionFragment;
    "getColorsArrayLenght()": FunctionFragment;
    "getCurrentColors(uint256)": FunctionFragment;
    "insertColorToColorsArray(bytes32)": FunctionFragment;
    "findColor(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "colorCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "colorsArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setColorOnDeploy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setColor",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "popColor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getColorsArrayLenght",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentColors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insertColorToColorsArray",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "findColor",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "colorCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "colorsArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setColorOnDeploy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setColor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "popColor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getColorsArrayLenght",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentColors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertColorToColorsArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findColor", data: BytesLike): Result;

  events: {
    "metadataDepositorEvent(address)": EventFragment;
    "setColorEvent(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "metadataDepositorEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setColorEvent"): EventFragment;
}

export type metadataDepositorEventEvent = TypedEvent<
  [string],
  { depositorAddress: string }
>;

export type metadataDepositorEventEventFilter =
  TypedEventFilter<metadataDepositorEventEvent>;

export type setColorEventEvent = TypedEvent<[string], { color: string }>;

export type setColorEventEventFilter = TypedEventFilter<setColorEventEvent>;

export interface Colors extends BaseContract {
  contractName: "Colors";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ColorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    colorCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    colorsArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setColorOnDeploy(
      color: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setColor(
      metadataDepositor: BytesLike,
      color: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    popColor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getColorsArrayLenght(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { l: BigNumber }>;

    getCurrentColors(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { colorReturned: string }>;

    insertColorToColorsArray(
      newColor: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findColor(
      color: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { colorFound: string }>;
  };

  colorCounter(overrides?: CallOverrides): Promise<BigNumber>;

  colorsArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setColorOnDeploy(
    color: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setColor(
    metadataDepositor: BytesLike,
    color: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  popColor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getColorsArrayLenght(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentColors(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  insertColorToColorsArray(
    newColor: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findColor(color: BytesLike, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    colorCounter(overrides?: CallOverrides): Promise<BigNumber>;

    colorsArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setColorOnDeploy(
      color: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setColor(
      metadataDepositor: BytesLike,
      color: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    popColor(overrides?: CallOverrides): Promise<void>;

    getColorsArrayLenght(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentColors(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    insertColorToColorsArray(
      newColor: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    findColor(color: BytesLike, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "metadataDepositorEvent(address)"(
      depositorAddress?: null
    ): metadataDepositorEventEventFilter;
    metadataDepositorEvent(
      depositorAddress?: null
    ): metadataDepositorEventEventFilter;

    "setColorEvent(bytes32)"(color?: null): setColorEventEventFilter;
    setColorEvent(color?: null): setColorEventEventFilter;
  };

  estimateGas: {
    colorCounter(overrides?: CallOverrides): Promise<BigNumber>;

    colorsArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setColorOnDeploy(
      color: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setColor(
      metadataDepositor: BytesLike,
      color: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    popColor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getColorsArrayLenght(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentColors(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insertColorToColorsArray(
      newColor: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findColor(color: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    colorCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    colorsArray(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setColorOnDeploy(
      color: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setColor(
      metadataDepositor: BytesLike,
      color: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    popColor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getColorsArrayLenght(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentColors(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insertColorToColorsArray(
      newColor: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findColor(
      color: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
